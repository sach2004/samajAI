import { Document, HeadingLevel, Packer, Paragraph, TextRun } from "docx";
import { NextResponse } from "next/server";

export async function POST(request) {
  try {
    const { text, language, title } = await request.json();

    console.log("üìÑ Generating DOCX for language:", language);

    const doc = new Document({
      sections: [
        {
          properties: {},
          children: [
            new Paragraph({
              text: "Contextualized Document",
              heading: HeadingLevel.HEADING_1,
              spacing: { after: 200 },
              alignment: "center",
            }),

            new Paragraph({
              children: [
                new TextRun({
                  text: "Generated by ContextAI",
                  size: 20,
                  color: "666666",
                }),
              ],
              spacing: { after: 400 },
              alignment: "center",
            }),

            new Paragraph({
              text: "",
              spacing: { after: 200 },
            }),

            ...text.split("\n\n").map(
              (paragraph) =>
                new Paragraph({
                  children: [
                    new TextRun({
                      text: paragraph.trim(),
                      size: 22,
                    }),
                  ],
                  spacing: { after: 200 },
                  alignment: "justify",
                })
            ),
          ],
        },
      ],
    });

    const buffer = await Packer.toBuffer(doc);

    console.log("‚úÖ DOCX generated successfully");

    return new NextResponse(buffer, {
      headers: {
        "Content-Type":
          "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "Content-Disposition": `attachment; filename="${title}_${language}.docx"`,
      },
    });
  } catch (error) {
    console.error("‚ùå DOCX generation error:", error);
    return NextResponse.json(
      { error: "Failed to generate DOCX: " + error.message },
      { status: 500 }
    );
  }
}
